// 给你一根长度为n的绳子，请把绳子剪成整数长的m段
// （m、n都是整数，n>1并且m>1，m<=n），每段绳子的长度记为k[1],...,k[m]。请问k[1]x...xk[m]可能的最大乘积是多少？
// 例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
// 输入描述：
// 输入一个数n，意义见题面。（2 <= n <= 60）




// 这题用动态规划是比较好理解的
//
// 我们想要求长度为n的绳子剪掉后的最大乘积，可以从前面比n小的绳子转移而来

// 用一个dp数组记录从0到n长度的绳子剪掉后的最大乘积，也就是dp[i]表示长度为i的绳子剪成m段后的最大乘积，初始化dp[2] = 1

// 我们先把绳子剪掉第一段（长度为j），如果只剪掉长度为1，对最后的乘积无任何增益，所以从长度为2开始剪
// 剪了第一段后，剩下(i - j)长度可以剪也可以不剪。如果不剪的话长度乘积即为j * (i - j)；如果剪的话长度乘积即为j * dp[i - j]。
// 取两者最大值max(j * (i - j), j * dp[i - j])
// 第一段长度j可以取的区间为[2,i)，对所有j不同的情况取最大值，因此最终dp[i]的转移方程为
// dp[i] = max(dp[i], max(j * (i - j), j * dp[i - j]))
// 最后返回dp[n]即可


/**
 * @param {number} n
 * @return {number}
 */
var cuttingRope = function(n) {
  const d = {};

  d[0] = 1;
  d[1] = 1;
  d[2] = 1;
  d[3] = 2;
  // 长度为n 的绳子
  for (let i = 3; i <= n ; i++) {
    d[i] = 0;
    // 第一段可能的情况
    for (let j = 2; j < i ; j++) {
      d[i] = Math.max(d[i], j * (i - j), j * d[i - j]);
      console.log(d);
    }
  }

  return d[n];
};

console.log(cuttingRope(10));


