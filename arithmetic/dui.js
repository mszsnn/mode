
// 堆排序算法的特性
/*堆排序算法的特性将数组看成是一个完全二叉树
1 将树构建为大顶堆， 就是节点的树都大于等于叶子节点， 或者小于等于叶子节点
2 将树的顶点，和最后一个元素交换，就得到了最大或者最小值
3 除了最后一个，继续调整剩下的树，这样就能得到第二大的树，依次类推，就能得到完整的排序*/


// 长度为len 的非叶子节点的最后一个节点  len/2 - 1
// 节点和子节点   a[i]   左节点 a[2 * i] + 1  和 右节点a[2 * i] + 2



function adjustHeap(arr,i,len){
  //将当前值保存
  var temp=arr[i];
  //从i结点的左子结点开始，也就是2i+1处开始
  for(var j=2*i+1;j<len;j=2*j+1){
    //如果左子结点小于右子结点，j指向右子结点
    if((j+1<len)&&arr[j]<arr[j+1]){
      j++;
    }
    //如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）值和索引都赋值
    if(arr[j]>temp){
      arr[i]=arr[j];
      i=j;
    }else{
      break;
    }
  }
  arr[i]=temp;      //将temp值放到最终的位置

}
